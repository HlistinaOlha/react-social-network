{"version":3,"file":"static/js/574.889778f7.chunk.js","mappings":"2JACA,QAAuB,sB,kMCuEvB,MAAMA,UAAuBC,EAAAA,UAAUC,WAAAA,GAAA,SAAAC,WAAA,KAanCC,eAAiB,KACb,IAAIC,EAASC,KAAKC,MAAMC,GAEnBH,IACDA,EAASC,KAAKC,MAAME,kBAGxBH,KAAKC,MAAMG,YAAYL,GACvBC,KAAKC,MAAMI,WAAWN,EAAO,CAChC,CApBDO,iBAAAA,GACIN,KAAKF,iBACLE,KAAKC,MAAMM,mBAAkB,EAAO,GAAIP,KAAKC,MAAMO,YAAaR,KAAKC,MAAMQ,SAC/E,CAEAC,kBAAAA,CAAmBC,EAAWC,GACtBD,EAAUT,KAAOF,KAAKC,MAAMC,IAC5BF,KAAKF,gBAEb,CAaAe,MAAAA,GASA,EAIJ,QA9FA,WACI,MAAMC,GAAWC,EAAAA,EAAAA,OAEX,eAACC,EAAc,iBAAEb,IAAoBc,EAAAA,EAAAA,KAErCC,GAAUC,EAAAA,EAAAA,KAAYC,IAASC,EAAAA,EAAAA,IAAeD,KAC9CE,GAASH,EAAAA,EAAAA,KAAYC,IAASG,EAAAA,EAAAA,IAAcH,KAC5CI,GAAaL,EAAAA,EAAAA,KAAYC,IAASK,EAAAA,EAAAA,IAAcL,KAChDM,GAAiBC,EAAAA,EAAAA,MAAYzB,GAC7B0B,GAA2BF,GAAmBvB,KAAsBuB,EACpEG,GAAkBV,EAAAA,EAAAA,KAAYC,IAASU,EAAAA,EAAAA,IAAmBV,KAC1DX,GAAWU,EAAAA,EAAAA,KAAYC,IAASW,EAAAA,EAAAA,IAAYX,KAC5CZ,GAAcW,EAAAA,EAAAA,KAAYC,IAASY,EAAAA,EAAAA,IAAeZ,KAwBxD,OACIa,EAAAA,EAAAA,KAACC,EAAAA,EAAaC,SAAQ,CAACC,MAAO,CAAC,KAAM,KAAM5B,EAAaC,EAAUoB,GAAiBQ,UAC/EJ,EAAAA,EAAAA,KAACvC,EAAc,CAACwB,QAASA,EACTT,SAAUA,EACVD,YAAaA,EACbQ,eAAgBA,EAChBb,iBAAkBA,EAClBD,GAAIwB,EACJE,wBAAyBA,EACzBN,OAAQA,EACRE,WAAYA,EACZpB,YA/BHF,IACjBY,GAASwB,EAAAA,EAAAA,IAAWpC,GAAI,EA+BJG,WA5BJH,IAChBY,GAASyB,EAAAA,EAAAA,IAAUrC,GAAI,EA4BHsC,YArBHC,IACjB3B,GAAS4B,EAAAA,EAAAA,IAAYD,GAAO,EAqBRE,cAlBDzB,IACnBJ,GAAS8B,EAAAA,EAAAA,IAAY1B,GAAS,EAkBVX,kBA3BEA,CAACsC,EAAUC,EAAYC,EAAMtC,KACnDK,GAASkC,EAAAA,EAAAA,IAASH,EAAUC,EAAYC,EAAMtC,GAAU,KA8BhE,ECxDA,EATgBwC,KAGJhB,EAAAA,EAAAA,KAAA,OAAKiB,UAAWC,EAAYd,UACxBJ,EAAAA,EAAAA,KAACmB,EAAoB,K","sources":["webpack://social-network/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfileItem/ProfileItemContainer.jsx","components/Profile/Profile.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Profile_main__EjfeH\"};","import React, {Component} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {editProfile, getProfile, getStatus, uploadImage} from \"../../../redux/profile-reducer\";\r\nimport ProfileItem from \"./ProfileItem\";\r\nimport {getIsFetching, getUserProfile, getUserStatus} from \"../../../redux/selectors/profile-selectors\";\r\nimport {useAuth} from \"../../../hook/useAuth\";\r\nimport {UsersContext} from \"../../Users/UsersList/UsersContext\";\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getTotalUsersCount\r\n} from \"../../../redux/selectors/users-selectors\";\r\nimport {getUsers} from \"../../../redux/users-reducer\";\r\n\r\nfunction ProfileItemContainer() {\r\n    const dispatch = useDispatch()\r\n\r\n    const {authorisedUser, authorisedUserId} = useAuth()\r\n\r\n    const profile = useSelector(state => getUserProfile(state))\r\n    const status = useSelector(state => getUserStatus(state))\r\n    const isFetching = useSelector(state => getIsFetching(state))\r\n    const selectedUserId = useParams().id\r\n    const isCurrentUserAuthorised = !selectedUserId || (authorisedUserId === +selectedUserId);\r\n    const totalUsersCount = useSelector(state => getTotalUsersCount(state))\r\n    const pageSize = useSelector(state => getPageSize(state))\r\n    const currentPage = useSelector(state => getCurrentPage(state))\r\n    //const navigate = useNavigate();\r\n    //const goBack = () => navigate(-1)\r\n\r\n    const loadProfile = (id) => {\r\n        dispatch(getProfile(id))\r\n    }\r\n\r\n    const loadStatus = (id) => {\r\n        dispatch(getStatus(id))\r\n    }\r\n\r\n    const loadFilteredUsers = (isFriend, nameString, page, pageSize) => {\r\n        dispatch(getUsers(isFriend, nameString, page, pageSize))\r\n    }\r\n\r\n    const changeImage = (image) => {\r\n        dispatch(uploadImage(image))\r\n    }\r\n\r\n    const updateProfile = (profile) => {\r\n        dispatch(editProfile(profile))\r\n    }\r\n\r\n    return (\r\n        <UsersContext.Provider value={[null, null, currentPage, pageSize, totalUsersCount]}>\r\n            <ProfileItemAPI profile={profile}\r\n                            pageSize={pageSize}\r\n                            currentPage={currentPage}\r\n                            authorisedUser={authorisedUser}\r\n                            authorisedUserId={authorisedUserId}\r\n                            id={selectedUserId}\r\n                            isCurrentUserAuthorised={isCurrentUserAuthorised}\r\n                            status={status}\r\n                            isFetching={isFetching}\r\n                            loadProfile={loadProfile}\r\n                            loadStatus={loadStatus}\r\n                            changeImage={changeImage}\r\n                            updateProfile={updateProfile}\r\n                            loadFilteredUsers={loadFilteredUsers}\r\n            />\r\n        </UsersContext.Provider>\r\n    )\r\n}\r\n\r\nclass ProfileItemAPI extends Component {\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n        this.props.loadFilteredUsers(true,  '', this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.id !== this.props.id) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    refreshProfile = () => {\r\n        let userId = this.props.id;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId\r\n        }\r\n\r\n        this.props.loadProfile(userId)\r\n        this.props.loadStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return ( /*this.props.isFetching ?\r\n            <Preloader/>\r\n            :*/\r\n            <>\r\n                {/* <button onClick={this.props.goBack}>Back</button>*/}\r\n                <ProfileItem {...this.props} profile={this.props.profile}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileItemContainer\r\n","import React from \"react\";\r\nimport styles from './Profile.module.css'\r\nimport PostListContainer from \"./PostList/PostListContainer\";\r\nimport ProfileItemContainer from \"./ProfileItem/ProfileItemContainer\";\r\n\r\nconst Profile = () => {\r\n\r\n    return (\r\n            <div className={styles.main}>\r\n                <ProfileItemContainer/>\r\n            </div>\r\n        )\r\n\r\n}\r\nexport default Profile;\r\n\r\n/*const mapStateToProps = (state) => {\r\n    return {\r\n        isFetching: state.auth.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Profile)*/\r\n\r\n/*export default function StoryTray({stories}) {\r\n\r\n\r\n    return (\r\n        <ul>\r\n            {\r\n                stories.map(story => (\r\n                        <li key={story.id}>\r\n                            {story.label}\r\n                        </li>\r\n                    )\r\n                )\r\n            }\r\n            <li>Create Story</li>\r\n        </ul>\r\n    );\r\n}*/\r\n\r\n\r\n/*\r\nconst recipes = [{\r\n    id: 'greek-salad',\r\n    name: 'Greek Salad',\r\n    ingredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']\r\n}, {\r\n    id: 'hawaiian-pizza',\r\n    name: 'Hawaiian Pizza',\r\n    ingredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']\r\n}, {\r\n    id: 'hummus',\r\n    name: 'Hummus',\r\n    ingredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']\r\n}];\r\n\r\nconst poem = {\r\n    lines: [\r\n        'I write, erase, rewrite',\r\n        'Erase again, and then',\r\n        'A poppy blooms.'\r\n    ]\r\n};\r\n\r\n\r\nexport default function Poem() {\r\n    return (\r\n        <article>\r\n            {poem.lines.map((line, index) =>\r\n                <Fragment key={index}>\r\n                    <p >\r\n                        {line}\r\n                    </p>\r\n                    {(index > 0 || index !== poem.lines.length-1) && <hr/>}\r\n                </Fragment>\r\n            )}\r\n        </article>\r\n    );\r\n}*/\r\n/*\r\nconst RecipeListItem = ({recipe}) => {\r\n\r\n    return (\r\n        recipe.ingredients.map(ingredient => {\r\n\r\n            return <li key={ingredient}>\r\n                {ingredient}\r\n            </li>\r\n        })\r\n    )\r\n}\r\n\r\nexport default function Settings() {\r\n    return (\r\n        <div>\r\n            <h1>Recipes</h1>\r\n            { recipes.map(recipe => {\r\n                    return <div key={recipe.id}>\r\n                        <h2>{recipe.name}</h2>\r\n                        <ul>\r\n                            <RecipeListItem recipe={recipe}/>\r\n                        </ul>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}*/\r\n\r\n\r\n/*\r\nfunction Item({name, isPacked}) {\r\n\r\n//1) drawback: duplication of code (Conditionally returning JSX )\r\n/!*if (isPacked) {\r\nreturn <li className=\"item\">{name + ' ✔'}</li>;\r\n}\r\nreturn <li className=\"item\">{name}</li>;*!/\r\n\r\n// 2)drawback: Good for simple conditions (Conditionally including JSX: (ternary) operator (? :))\r\n/!* return <li className=\"item\">{\r\nisPacked ?\r\n(<del>{name + ' ✔'}</del>)\r\n: name\r\n}</li>*!/\r\n\r\n//3)drawback: cannot be used with numbers, since they are always true (Conditionally including JSX: Logical AND operator (&&)  )\r\n/!*return <li className=\"item\">\r\n{name} {isPacked && ' ✔'}\r\n</li>;*!/\r\n\r\n//4)drawback:This style is the most verbose, but it’s also the most flexible (Conditionally assigning JSX to a variable)\r\nlet itemContent = name;\r\n\r\nif (isPacked) {\r\nitemContent += ' ✔'\r\n}\r\nreturn <li className=\"item\">{itemContent}</li>;\r\n\r\n}\r\n\r\nexport default function PackingList() {\r\nreturn (\r\n<section>\r\n<h1>Sally Ride's Packing List</h1>\r\n<ul>\r\n<Item\r\nisPacked={true}\r\nname=\"Space suit\"\r\n/>\r\n<Item\r\nisPacked={true}\r\nname=\"Helmet with a golden leaf\"\r\n/>\r\n<Item\r\nisPacked={false}\r\nname=\"Photo of Tam\"\r\n/>\r\n</ul>\r\n</section>\r\n);\r\n}*/\r\n\r\n\r\n\r\n"],"names":["ProfileItemAPI","Component","constructor","arguments","refreshProfile","userId","this","props","id","authorisedUserId","loadProfile","loadStatus","componentDidMount","loadFilteredUsers","currentPage","pageSize","componentDidUpdate","prevProps","prevState","render","dispatch","useDispatch","authorisedUser","useAuth","profile","useSelector","state","getUserProfile","status","getUserStatus","isFetching","getIsFetching","selectedUserId","useParams","isCurrentUserAuthorised","totalUsersCount","getTotalUsersCount","getPageSize","getCurrentPage","_jsx","UsersContext","Provider","value","children","getProfile","getStatus","changeImage","image","uploadImage","updateProfile","editProfile","isFriend","nameString","page","getUsers","Profile","className","styles","ProfileItemContainer"],"sourceRoot":""}